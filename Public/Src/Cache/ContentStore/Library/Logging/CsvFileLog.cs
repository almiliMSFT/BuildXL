// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Diagnostics.ContractsLight;
using System.Globalization;
using System.Linq;
using System.Text;
using BuildXL.Cache.ContentStore.Interfaces.Logging;
using BuildXL.Utilities;

namespace BuildXL.Cache.ContentStore.Logging
{
    /// <summary>
    ///     Like <see cref="FileLog"/> except that it produces a valid CSV file.
    /// </summary>
    public sealed class CsvFileLog : FileLog
    {
        /// <summary>
        ///     Types of supported columns for the output CSV file
        /// </summary>
        public enum ColumnType
        {
            /// <summary>
            ///     Empty string.
            /// </summary>
            EmptyString,

            /// <summary>
            ///     An autogenerated GUID unique to every CsvFileLog.
            /// </summary>
            SessionId,

            /// <summary>
            ///     Name of the host machine
            /// </summary>
            HostName,

            /// <summary>
            ///     Timestamp of the message
            /// </summary>
            Timestamp,

            /// <summary>
            ///     The id of the thread logging the message
            /// </summary>
            ThreadId,

            /// <summary>
            ///     Severity (<see cref="Severity"/>)
            /// </summary>
            Severity,

            /// <summary>
            ///     Message to log
            /// </summary>
            Message
        }

        private readonly ColumnType[] _schema;
        private readonly string _host;

        /// <summary>
        ///     Unique identifier of this log object.
        /// </summary>
        public Guid Guid { get; }

        /// <summary>
        ///     Constructor.  Initializes this object and does nothing else.
        /// </summary>
        /// <param name="logFilePath">Full path to log file</param>
        /// <param name="schema">CSV schema as a list of columns. Each element in the list denotes a column to be rendered at that position.</param>
        /// <param name="severity">Minimum severity to log</param>
        /// <param name="maxFileSize">Maximum size of the log file.</param>
        public CsvFileLog
            (
            string logFilePath,
            IEnumerable<ColumnType> schema,
            Severity severity,
            long maxFileSize
            )
            :
            base
                (
                logFilePath,
                severity,
                autoFlush: true,
                maxFileSize: maxFileSize,
                maxFileCount: 0 // unlimited
                )
        {
            Contract.Requires(schema != null);

            _schema = schema.ToArray();
            _host = CsvEscape(Environment.MachineName);
            Guid = Guid.NewGuid();
        }

        /// <summary>
        ///     Logs a message to the underlying CSV file according to the schema passed to the constructor of this object.
        /// </summary>
        public override void Write(DateTime dateTime, int threadId, Severity severity, string message)
        {
            if (severity < CurrentSeverity)
            {
                return;
            }

            using (var stringBuilderPool = Pools.StringBuilderPool.GetInstance())
            {
                StringBuilder line = stringBuilderPool.Instance;
                RenderMessage(line, dateTime, threadId, severity, message);
                WriteLineInternal(severity, line.ToString());
            }
        }

        /// <nodoc />
        public void RenderMessage(StringBuilder line, DateTime dateTime, int threadId, Severity severity, string message)
        {
            foreach (var col in _schema)
            {
                if (line.Length > 0)
                {
                    line.Append(",");
                }

                line.Append('"');
                line.Append(RenderColumn(col, dateTime, threadId, severity, message));
                line.Append('"');
            }
        }

        /// <nodoc />
        public string RenderColumn(ColumnType col, DateTime dateTime, int threadId, Severity severity, string message)
        {
            switch (col)
            {
                case ColumnType.EmptyString: return string.Empty;
                case ColumnType.SessionId:   return Guid.ToString();
                case ColumnType.HostName:    return _host;
                case ColumnType.Timestamp:   return string.Format(CultureInfo.InvariantCulture, "{0:yyyy-MM-dd HH:mm:ss.fff}", dateTime);
                case ColumnType.ThreadId:    return threadId.ToString();
                case ColumnType.Severity:    return SeverityNames[(int)severity];
                case ColumnType.Message:     return CsvEscape(message);
                default:
                    throw Contract.AssertFailure("Unknown column type: " + col);
            }
        }

        private string CsvEscape(string str)
        {
            return str.Replace("\"", "\"\"");
        }
    }
}
