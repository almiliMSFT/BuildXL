//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JPath.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BuildXL.Execution.Analyzer.JPath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, WS=8, NOT=9, AND=10, 
		OR=11, XOR=12, IFF=13, GTE=14, LTE=15, GT=16, LT=17, EQ=18, NEQ=19, MATCH=20, 
		NMATCH=21, MINUS=22, IntLit=23, StrLit=24, RegExLit=25, ID=26;
	public const int
		RULE_unaryOp = 0, RULE_binaryOp = 1, RULE_logicBinaryOp = 2, RULE_logicUnaryOp = 3, 
		RULE_boolExpr = 4, RULE_logicExpr = 5, RULE_expr = 6;
	public static readonly string[] ruleNames = {
		"unaryOp", "binaryOp", "logicBinaryOp", "logicUnaryOp", "boolExpr", "logicExpr", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'$'", "'..'", "'.'", "'['", "']'", null, "'not'", 
		"'and'", "'or'", "'xor'", "'iff'", "'>='", "'<='", "'>'", "'<'", "'='", 
		"'!='", "'~'", "'!~'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "WS", "NOT", "AND", "OR", 
		"XOR", "IFF", "GTE", "LTE", "GT", "LT", "EQ", "NEQ", "MATCH", "NMATCH", 
		"MINUS", "IntLit", "StrLit", "RegExLit", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 0, RULE_unaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		public ITerminalNode GTE() { return GetToken(JPathParser.GTE, 0); }
		public ITerminalNode GT() { return GetToken(JPathParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(JPathParser.LTE, 0); }
		public ITerminalNode LT() { return GetToken(JPathParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(JPathParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JPathParser.NEQ, 0); }
		public ITerminalNode MATCH() { return GetToken(JPathParser.MATCH, 0); }
		public ITerminalNode NMATCH() { return GetToken(JPathParser.NMATCH, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 2, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTE) | (1L << LTE) | (1L << GT) | (1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << MATCH) | (1L << NMATCH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicBinaryOpContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(JPathParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JPathParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(JPathParser.XOR, 0); }
		public ITerminalNode IFF() { return GetToken(JPathParser.IFF, 0); }
		public LogicBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicBinaryOpContext logicBinaryOp() {
		LogicBinaryOpContext _localctx = new LogicBinaryOpContext(Context, State);
		EnterRule(_localctx, 4, RULE_logicBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << IFF))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicUnaryOpContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(JPathParser.NOT, 0); }
		public LogicUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicUnaryOpContext logicUnaryOp() {
		LogicUnaryOpContext _localctx = new LogicUnaryOpContext(Context, State);
		EnterRule(_localctx, 6, RULE_logicUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
	 
		public BoolExprContext() { }
		public virtual void CopyFrom(BoolExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryBoolExprContext : BoolExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryBoolExprContext : BoolExprContext {
		public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubBoolExprContext : BoolExprContext {
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public SubBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_boolExpr);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new BinaryBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; expr(0);
				State = 23; binaryOp();
				State = 24; expr(0);
				}
				break;
			case 2:
				_localctx = new UnaryBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; unaryOp();
				State = 27; expr(0);
				}
				break;
			case 3:
				_localctx = new SubBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; Match(T__0);
				State = 30; boolExpr();
				State = 31; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolLogicExprContext : LogicExprContext {
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public BoolLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		public LogicUnaryOpContext logicUnaryOp() {
			return GetRuleContext<LogicUnaryOpContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubLogicExprContext : LogicExprContext {
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public SubLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		public LogicBinaryOpContext logicBinaryOp() {
			return GetRuleContext<LogicBinaryOpContext>(0);
		}
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new BoolLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 36; boolExpr();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; logicUnaryOp();
				State = 38; logicExpr(2);
				}
				break;
			case 3:
				{
				_localctx = new SubLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 40; Match(T__0);
				State = 41; logicExpr(0);
				State = 42; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
					State = 46;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 47; logicBinaryOp();
					State = 48; logicExpr(4);
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExprContext : ExprContext {
		public ExprContext Lhs;
		public IToken PropertyName;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JPathParser.ID, 0); }
		public MapExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterMapExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitMapExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode RegExLit() { return GetToken(JPathParser.RegExLit, 0); }
		public RegExLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRegExLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRegExLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExprContext : ExprContext {
		public IToken PropertyName;
		public ITerminalNode ID() { return GetToken(JPathParser.ID, 0); }
		public SelectorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSelectorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSelectorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExprContext : ExprContext {
		public ExprContext Lhs;
		public LogicExprContext Filter;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public FilterExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RootExprContext : ExprContext {
		public RootExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode IntLit() { return GetToken(JPathParser.IntLit, 0); }
		public IntLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public StrLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterStrLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitStrLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext Begin;
		public ExprContext End;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				_localctx = new RootExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 56; Match(T__2);
				}
				break;
			case ID:
				{
				_localctx = new SelectorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; ((SelectorExprContext)_localctx).PropertyName = Match(ID);
				}
				break;
			case StrLit:
				{
				_localctx = new StrLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; ((StrLitExprContext)_localctx).Value = Match(StrLit);
				}
				break;
			case RegExLit:
				{
				_localctx = new RegExLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; ((RegExLitExprContext)_localctx).Value = Match(RegExLit);
				}
				break;
			case IntLit:
				{
				_localctx = new IntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60; ((IntLitExprContext)_localctx).Value = Match(IntLit);
				}
				break;
			case T__0:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; Match(T__0);
				State = 62; ((SubExprContext)_localctx).Sub = expr(0);
				State = 63; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).Begin = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 68; Match(T__3);
						State = 69; ((RangeExprContext)_localctx).End = expr(5);
						}
						break;
					case 2:
						{
						_localctx = new MapExprContext(new ExprContext(_parentctx, _parentState));
						((MapExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 71; Match(T__4);
						State = 72; ((MapExprContext)_localctx).PropertyName = Match(ID);
						}
						break;
					case 3:
						{
						_localctx = new FilterExprContext(new ExprContext(_parentctx, _parentState));
						((FilterExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 74; Match(T__5);
						State = 75; ((FilterExprContext)_localctx).Filter = logicExpr(0);
						State = 76; Match(T__6);
						}
						break;
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', 'V', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'$', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '/', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x35', '\n', '\a', '\f', '\a', '\xE', '\a', '\x38', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x44', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', 'Q', '\n', '\b', '\f', '\b', '\xE', 
		'\b', 'T', '\v', '\b', '\x3', '\b', '\x2', '\x4', '\f', '\xE', '\t', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x4', '\x3', '\x2', '\x10', 
		'\x17', '\x3', '\x2', '\f', '\xF', '\x2', '[', '\x2', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x12', '\x3', '\x2', '\x2', '\x2', '\x6', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\n', '#', '\x3', '\x2', '\x2', '\x2', '\f', '.', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x43', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\a', 
		'\x18', '\x2', '\x2', '\x11', '\x3', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\t', '\x2', '\x2', '\x2', '\x13', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x15', '\t', '\x3', '\x2', '\x2', '\x15', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\v', '\x2', '\x2', '\x17', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x5', '\xE', '\b', 
		'\x2', '\x19', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\x5', 
		'\xE', '\b', '\x2', '\x1B', '$', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\x5', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\xE', '\b', '\x2', 
		'\x1E', '$', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x3', '\x2', 
		'\x2', ' ', '!', '\x5', '\n', '\x6', '\x2', '!', '\"', '\a', '\x4', '\x2', 
		'\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '#', '\x1C', '\x3', '\x2', '\x2', '\x2', '#', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '$', '\v', '\x3', '\x2', '\x2', '\x2', '%', '&', 
		'\b', '\a', '\x1', '\x2', '&', '/', '\x5', '\n', '\x6', '\x2', '\'', '(', 
		'\x5', '\b', '\x5', '\x2', '(', ')', '\x5', '\f', '\a', '\x4', ')', '/', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x3', '\x2', '\x2', '+', 
		',', '\x5', '\f', '\a', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', '-', 
		'/', '\x3', '\x2', '\x2', '\x2', '.', '%', '\x3', '\x2', '\x2', '\x2', 
		'.', '\'', '\x3', '\x2', '\x2', '\x2', '.', '*', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x36', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\f', 
		'\x5', '\x2', '\x2', '\x31', '\x32', '\x5', '\x6', '\x4', '\x2', '\x32', 
		'\x33', '\x5', '\f', '\a', '\x6', '\x33', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\b', 
		'\b', '\x1', '\x2', ':', '\x44', '\a', '\x5', '\x2', '\x2', ';', '\x44', 
		'\a', '\x1C', '\x2', '\x2', '<', '\x44', '\a', '\x1A', '\x2', '\x2', '=', 
		'\x44', '\a', '\x1B', '\x2', '\x2', '>', '\x44', '\a', '\x19', '\x2', 
		'\x2', '?', '@', '\a', '\x3', '\x2', '\x2', '@', '\x41', '\x5', '\xE', 
		'\b', '\x2', '\x41', '\x42', '\a', '\x4', '\x2', '\x2', '\x42', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x43', ';', '\x3', '\x2', '\x2', '\x2', '\x43', '<', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '=', '\x3', '\x2', '\x2', '\x2', '\x43', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x44', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\f', '\x6', '\x2', '\x2', '\x46', 
		'G', '\a', '\x6', '\x2', '\x2', 'G', 'Q', '\x5', '\xE', '\b', '\a', 'H', 
		'I', '\f', '\x5', '\x2', '\x2', 'I', 'J', '\a', '\a', '\x2', '\x2', 'J', 
		'Q', '\a', '\x1C', '\x2', '\x2', 'K', 'L', '\f', '\x4', '\x2', '\x2', 
		'L', 'M', '\a', '\b', '\x2', '\x2', 'M', 'N', '\x5', '\f', '\a', '\x2', 
		'N', 'O', '\a', '\t', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x45', '\x3', '\x2', '\x2', '\x2', 'P', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'K', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', '\xF', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\b', '#', '.', '\x36', '\x43', 'P', 'R',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BuildXL.Execution.Analyzer.JPath
