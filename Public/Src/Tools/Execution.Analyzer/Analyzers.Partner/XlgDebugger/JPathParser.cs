//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JPath.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BuildXL.Execution.Analyzer.JPath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, WS=8, NOT=9, AND=10, 
		OR=11, XOR=12, IFF=13, GTE=14, LTE=15, GT=16, LT=17, EQ=18, NEQ=19, MATCH=20, 
		NMATCH=21, MINUS=22, IntLit=23, StrLit=24, RegExLit=25, ID=26;
	public const int
		RULE_unaryOp = 0, RULE_binaryOp = 1, RULE_expr = 2;
	public static readonly string[] ruleNames = {
		"unaryOp", "binaryOp", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'..'", "'.'", "'['", "']'", "'('", "')'", null, "'not'", 
		"'and'", "'or'", "'xor'", "'iff'", "'>='", "'<='", "'>'", "'<'", "'='", 
		"'!='", "'~'", "'!~'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "WS", "NOT", "AND", "OR", 
		"XOR", "IFF", "GTE", "LTE", "GT", "LT", "EQ", "NEQ", "MATCH", "NMATCH", 
		"MINUS", "IntLit", "StrLit", "RegExLit", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(JPathParser.NOT, 0); }
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 0, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		public ITerminalNode GTE() { return GetToken(JPathParser.GTE, 0); }
		public ITerminalNode GT() { return GetToken(JPathParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(JPathParser.LTE, 0); }
		public ITerminalNode LT() { return GetToken(JPathParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(JPathParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JPathParser.NEQ, 0); }
		public ITerminalNode MATCH() { return GetToken(JPathParser.MATCH, 0); }
		public ITerminalNode NMATCH() { return GetToken(JPathParser.NMATCH, 0); }
		public ITerminalNode AND() { return GetToken(JPathParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JPathParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(JPathParser.XOR, 0); }
		public ITerminalNode IFF() { return GetToken(JPathParser.IFF, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 2, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << IFF) | (1L << GTE) | (1L << LTE) | (1L << GT) | (1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << MATCH) | (1L << NMATCH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExprContext : ExprContext {
		public ExprContext Lhs;
		public IToken PropertyName;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JPathParser.ID, 0); }
		public MapExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterMapExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitMapExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode RegExLit() { return GetToken(JPathParser.RegExLit, 0); }
		public RegExLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRegExLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRegExLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExprContext : ExprContext {
		public IToken PropertyName;
		public ITerminalNode ID() { return GetToken(JPathParser.ID, 0); }
		public SelectorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSelectorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSelectorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExprContext : ExprContext {
		public ExprContext Lhs;
		public ExprContext Filter;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FilterExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RootExprContext : ExprContext {
		public RootExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode IntLit() { return GetToken(JPathParser.IntLit, 0); }
		public IntLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		public ExprContext Lhs;
		public BinaryOpContext Op;
		public ExprContext Rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public StrLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterStrLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitStrLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext Begin;
		public ExprContext End;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public UnaryOpContext Op;
		public ExprContext Sub;
		public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new RootExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 11; Match(T__0);
				}
				break;
			case ID:
				{
				_localctx = new SelectorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12; ((SelectorExprContext)_localctx).PropertyName = Match(ID);
				}
				break;
			case IntLit:
				{
				_localctx = new IntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13; ((IntLitExprContext)_localctx).Value = Match(IntLit);
				}
				break;
			case StrLit:
				{
				_localctx = new StrLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 14; ((StrLitExprContext)_localctx).Value = Match(StrLit);
				}
				break;
			case RegExLit:
				{
				_localctx = new RegExLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15; ((RegExLitExprContext)_localctx).Value = Match(RegExLit);
				}
				break;
			case NOT:
			case MINUS:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16; ((UnaryExprContext)_localctx).Op = unaryOp();
				State = 17; ((UnaryExprContext)_localctx).Sub = expr(3);
				}
				break;
			case T__5:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(T__5);
				State = 20; ((SubExprContext)_localctx).Sub = expr(0);
				State = 21; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 42;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 40;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).Begin = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 25;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 26; Match(T__1);
						State = 27; ((RangeExprContext)_localctx).End = expr(9);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 28;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 29; ((BinaryExprContext)_localctx).Op = binaryOp();
						State = 30; ((BinaryExprContext)_localctx).Rhs = expr(3);
						}
						break;
					case 3:
						{
						_localctx = new MapExprContext(new ExprContext(_parentctx, _parentState));
						((MapExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 32;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 33; Match(T__2);
						State = 34; ((MapExprContext)_localctx).PropertyName = Match(ID);
						}
						break;
					case 4:
						{
						_localctx = new FilterExprContext(new ExprContext(_parentctx, _parentState));
						((FilterExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 35;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 36; Match(T__3);
						State = 37; ((FilterExprContext)_localctx).Filter = expr(0);
						State = 38; Match(T__4);
						}
						break;
					}
					} 
				}
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\x30', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x1A', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '+', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '.', '\v', '\x4', '\x3', '\x4', '\x2', '\x3', '\x6', '\x5', 
		'\x2', '\x4', '\x6', '\x2', '\x4', '\x4', '\x2', '\v', '\v', '\x18', '\x18', 
		'\x3', '\x2', '\f', '\x17', '\x2', '\x36', '\x2', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\n', '\x3', '\x2', '\x2', '\x2', '\x6', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\t', '\t', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\n', '\v', '\t', '\x3', '\x2', '\x2', 
		'\v', '\x5', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\b', '\x4', '\x1', 
		'\x2', '\r', '\x1A', '\a', '\x3', '\x2', '\x2', '\xE', '\x1A', '\a', '\x1C', 
		'\x2', '\x2', '\xF', '\x1A', '\a', '\x19', '\x2', '\x2', '\x10', '\x1A', 
		'\a', '\x1A', '\x2', '\x2', '\x11', '\x1A', '\a', '\x1B', '\x2', '\x2', 
		'\x12', '\x13', '\x5', '\x2', '\x2', '\x2', '\x13', '\x14', '\x5', '\x6', 
		'\x4', '\x5', '\x14', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', 
		'\a', '\b', '\x2', '\x2', '\x16', '\x17', '\x5', '\x6', '\x4', '\x2', 
		'\x17', '\x18', '\a', '\t', '\x2', '\x2', '\x18', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\f', '\x3', '\x2', '\x2', '\x2', '\x19', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x10', '\x3', '\x2', '\x2', '\x2', '\x19', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x12', '\x3', '\x2', '\x2', '\x2', '\x19', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', ',', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\f', '\n', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x4', '\x2', 
		'\x2', '\x1D', '+', '\x5', '\x6', '\x4', '\v', '\x1E', '\x1F', '\f', '\x4', 
		'\x2', '\x2', '\x1F', ' ', '\x5', '\x4', '\x3', '\x2', ' ', '!', '\x5', 
		'\x6', '\x4', '\x5', '!', '+', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\f', '\a', '\x2', '\x2', '#', '$', '\a', '\x5', '\x2', '\x2', '$', '+', 
		'\a', '\x1C', '\x2', '\x2', '%', '&', '\f', '\x6', '\x2', '\x2', '&', 
		'\'', '\a', '\x6', '\x2', '\x2', '\'', '(', '\x5', '\x6', '\x4', '\x2', 
		'(', ')', '\a', '\a', '\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1B', '\x3', '\x2', '\x2', '\x2', '*', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '*', '\"', '\x3', '\x2', '\x2', '\x2', '*', '%', '\x3', '\x2', 
		'\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\a', '\x3', 
		'\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '\x5', '\x19', 
		'*', ',',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BuildXL.Execution.Analyzer.JPath
