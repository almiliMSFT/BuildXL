//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JPath.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BuildXL.Execution.Analyzer.JPath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, WS=8, NOT=9, AND=10, 
		OR=11, XOR=12, IFF=13, GTE=14, LTE=15, GT=16, LT=17, EQ=18, NEQ=19, MATCH=20, 
		NMATCH=21, MINUS=22, PLUS=23, TIMES=24, DIV=25, MOD=26, IntLit=27, StrLit=28, 
		RegExLit=29, ID=30, ESC_ID=31;
	public const int
		RULE_intBinaryOp = 0, RULE_intUnaryOp = 1, RULE_boolBinaryOp = 2, RULE_logicBinaryOp = 3, 
		RULE_logicUnaryOp = 4, RULE_intExpr = 5, RULE_boolExpr = 6, RULE_logicExpr = 7, 
		RULE_selector = 8, RULE_expr = 9;
	public static readonly string[] ruleNames = {
		"intBinaryOp", "intUnaryOp", "boolBinaryOp", "logicBinaryOp", "logicUnaryOp", 
		"intExpr", "boolExpr", "logicExpr", "selector", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'$'", "'.'", "'['", "']'", "'..'", null, "'not'", 
		"'and'", "'or'", "'xor'", "'iff'", "'>='", "'<='", "'>'", "'<'", "'='", 
		"'!='", "'~'", "'!~'", "'-'", "'+'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "WS", "NOT", "AND", "OR", 
		"XOR", "IFF", "GTE", "LTE", "GT", "LT", "EQ", "NEQ", "MATCH", "NMATCH", 
		"MINUS", "PLUS", "TIMES", "DIV", "MOD", "IntLit", "StrLit", "RegExLit", 
		"ID", "ESC_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IntBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(JPathParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public ITerminalNode TIMES() { return GetToken(JPathParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(JPathParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(JPathParser.MOD, 0); }
		public IntBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntBinaryOpContext intBinaryOp() {
		IntBinaryOpContext _localctx = new IntBinaryOpContext(Context, State);
		EnterRule(_localctx, 0, RULE_intBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << PLUS) | (1L << TIMES) | (1L << DIV) | (1L << MOD))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntUnaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public IntUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntUnaryOpContext intUnaryOp() {
		IntUnaryOpContext _localctx = new IntUnaryOpContext(Context, State);
		EnterRule(_localctx, 2, RULE_intUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; _localctx.Token = Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode GTE() { return GetToken(JPathParser.GTE, 0); }
		public ITerminalNode GT() { return GetToken(JPathParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(JPathParser.LTE, 0); }
		public ITerminalNode LT() { return GetToken(JPathParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(JPathParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JPathParser.NEQ, 0); }
		public ITerminalNode MATCH() { return GetToken(JPathParser.MATCH, 0); }
		public ITerminalNode NMATCH() { return GetToken(JPathParser.NMATCH, 0); }
		public BoolBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolBinaryOpContext boolBinaryOp() {
		BoolBinaryOpContext _localctx = new BoolBinaryOpContext(Context, State);
		EnterRule(_localctx, 4, RULE_boolBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTE) | (1L << LTE) | (1L << GT) | (1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << MATCH) | (1L << NMATCH))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode AND() { return GetToken(JPathParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JPathParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(JPathParser.XOR, 0); }
		public ITerminalNode IFF() { return GetToken(JPathParser.IFF, 0); }
		public LogicBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicBinaryOpContext logicBinaryOp() {
		LogicBinaryOpContext _localctx = new LogicBinaryOpContext(Context, State);
		EnterRule(_localctx, 6, RULE_logicBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << IFF))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicUnaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode NOT() { return GetToken(JPathParser.NOT, 0); }
		public LogicUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicUnaryOpContext logicUnaryOp() {
		LogicUnaryOpContext _localctx = new LogicUnaryOpContext(Context, State);
		EnterRule(_localctx, 8, RULE_logicUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; _localctx.Token = Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
	 
		public IntExprContext() { }
		public virtual void CopyFrom(IntExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryIntExprContext : IntExprContext {
		public IntExprContext Lhs;
		public IntBinaryOpContext Op;
		public IntExprContext Rhs;
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public IntBinaryOpContext intBinaryOp() {
			return GetRuleContext<IntBinaryOpContext>(0);
		}
		public BinaryIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIntExprContext : IntExprContext {
		public ExprContext Expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterExprIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitExprIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryIntExprContext : IntExprContext {
		public IntUnaryOpContext Op;
		public IntExprContext Sub;
		public IntUnaryOpContext intUnaryOp() {
			return GetRuleContext<IntUnaryOpContext>(0);
		}
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public UnaryIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubIntExprContext : IntExprContext {
		public IntExprContext Sub;
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public SubIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		return intExpr(0);
	}

	private IntExprContext intExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IntExprContext _localctx = new IntExprContext(Context, _parentState);
		IntExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_intExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new ExprIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 31; ((ExprIntExprContext)_localctx).Expr = expr(0);
				}
				break;
			case 2:
				{
				_localctx = new UnaryIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32; ((UnaryIntExprContext)_localctx).Op = intUnaryOp();
				State = 33; ((UnaryIntExprContext)_localctx).Sub = intExpr(3);
				}
				break;
			case 3:
				{
				_localctx = new SubIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35; Match(T__0);
				State = 36; ((SubIntExprContext)_localctx).Sub = intExpr(0);
				State = 37; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryIntExprContext(new IntExprContext(_parentctx, _parentState));
					((BinaryIntExprContext)_localctx).Lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_intExpr);
					State = 41;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 42; ((BinaryIntExprContext)_localctx).Op = intBinaryOp();
					State = 43; ((BinaryIntExprContext)_localctx).Rhs = intExpr(3);
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
	 
		public BoolExprContext() { }
		public virtual void CopyFrom(BoolExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryBoolExprContext : BoolExprContext {
		public IntExprContext Lhs;
		public BoolBinaryOpContext Op;
		public IntExprContext Rhs;
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public BoolBinaryOpContext boolBinaryOp() {
			return GetRuleContext<BoolBinaryOpContext>(0);
		}
		public BinaryBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubBoolExprContext : BoolExprContext {
		public BoolExprContext Sub;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public SubBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_boolExpr);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new BinaryBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; ((BinaryBoolExprContext)_localctx).Lhs = intExpr(0);
				State = 51; ((BinaryBoolExprContext)_localctx).Op = boolBinaryOp();
				State = 52; ((BinaryBoolExprContext)_localctx).Rhs = intExpr(0);
				}
				break;
			case 2:
				_localctx = new SubBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(T__0);
				State = 55; ((SubBoolExprContext)_localctx).Sub = boolExpr();
				State = 56; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolLogicExprContext : LogicExprContext {
		public BoolExprContext Expr;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public BoolLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		public LogicUnaryOpContext Op;
		public LogicExprContext Sub;
		public LogicUnaryOpContext logicUnaryOp() {
			return GetRuleContext<LogicUnaryOpContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubLogicExprContext : LogicExprContext {
		public LogicExprContext Sub;
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public SubLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		public LogicExprContext Lhs;
		public LogicBinaryOpContext Op;
		public LogicExprContext Rhs;
		public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		public LogicBinaryOpContext logicBinaryOp() {
			return GetRuleContext<LogicBinaryOpContext>(0);
		}
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new BoolLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 61; ((BoolLogicExprContext)_localctx).Expr = boolExpr();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; ((UnaryLogicExprContext)_localctx).Op = logicUnaryOp();
				State = 63; ((UnaryLogicExprContext)_localctx).Sub = logicExpr(2);
				}
				break;
			case 3:
				{
				_localctx = new SubLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; Match(T__0);
				State = 66; ((SubLogicExprContext)_localctx).Sub = logicExpr(0);
				State = 67; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
					((BinaryLogicExprContext)_localctx).Lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
					State = 71;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 72; ((BinaryLogicExprContext)_localctx).Op = logicBinaryOp();
					State = 73; ((BinaryLogicExprContext)_localctx).Rhs = logicExpr(4);
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EscIdSelectorContext : SelectorContext {
		public IToken PropertyName;
		public ITerminalNode ESC_ID() { return GetToken(JPathParser.ESC_ID, 0); }
		public EscIdSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterEscIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitEscIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdSelectorContext : SelectorContext {
		public IToken PropertyName;
		public ITerminalNode ID() { return GetToken(JPathParser.ID, 0); }
		public IdSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 16, RULE_selector);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; ((IdSelectorContext)_localctx).PropertyName = Match(ID);
				}
				break;
			case ESC_ID:
				_localctx = new EscIdSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; ((EscIdSelectorContext)_localctx).PropertyName = Match(ESC_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExprContext : ExprContext {
		public ExprContext Lhs;
		public SelectorContext Selector;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public MapExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterMapExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitMapExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode RegExLit() { return GetToken(JPathParser.RegExLit, 0); }
		public RegExLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRegExLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRegExLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExprContext : ExprContext {
		public SelectorContext Sub;
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public SelectorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSelectorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSelectorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExprContext : ExprContext {
		public ExprContext Lhs;
		public LogicExprContext Filter;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public FilterExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RootExprContext : ExprContext {
		public RootExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode IntLit() { return GetToken(JPathParser.IntLit, 0); }
		public IntLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public StrLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterStrLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitStrLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext Lhs;
		public IntExprContext Begin;
		public IntExprContext End;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ExprContext Lhs;
		public IntExprContext Index;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				_localctx = new RootExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 85; Match(T__2);
				}
				break;
			case ID:
			case ESC_ID:
				{
				_localctx = new SelectorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86; ((SelectorExprContext)_localctx).Sub = selector();
				}
				break;
			case StrLit:
				{
				_localctx = new StrLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; ((StrLitExprContext)_localctx).Value = Match(StrLit);
				}
				break;
			case RegExLit:
				{
				_localctx = new RegExLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; ((RegExLitExprContext)_localctx).Value = Match(RegExLit);
				}
				break;
			case IntLit:
				{
				_localctx = new IntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89; ((IntLitExprContext)_localctx).Value = Match(IntLit);
				}
				break;
			case T__0:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(T__0);
				State = 91; ((SubExprContext)_localctx).Sub = expr(0);
				State = 92; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 116;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MapExprContext(new ExprContext(_parentctx, _parentState));
						((MapExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 97; Match(T__3);
						State = 98; ((MapExprContext)_localctx).Selector = selector();
						}
						break;
					case 2:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						((IndexExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 100; Match(T__4);
						State = 101; ((IndexExprContext)_localctx).Index = intExpr(0);
						State = 102; Match(T__5);
						}
						break;
					case 3:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 105; Match(T__4);
						State = 106; ((RangeExprContext)_localctx).Begin = intExpr(0);
						State = 107; Match(T__6);
						State = 108; ((RangeExprContext)_localctx).End = intExpr(0);
						State = 109; Match(T__5);
						}
						break;
					case 4:
						{
						_localctx = new FilterExprContext(new ExprContext(_parentctx, _parentState));
						((FilterExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 111;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 112; Match(T__4);
						State = 113; ((FilterExprContext)_localctx).Filter = logicExpr(0);
						State = 114; Match(T__5);
						}
						break;
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return intExpr_sempred((IntExprContext)_localctx, predIndex);
		case 7: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool intExpr_sempred(IntExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '|', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '*', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x30', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x33', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '=', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'H', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'N', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'Q', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'U', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x61', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', 'w', '\n', '\v', '\f', '\v', '\xE', '\v', 'z', '\v', '\v', '\x3', 
		'\v', '\x2', '\x5', '\f', '\x10', '\x14', '\f', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x5', '\x3', '\x2', 
		'\x18', '\x1C', '\x3', '\x2', '\x10', '\x17', '\x3', '\x2', '\f', '\xF', 
		'\x2', '\x82', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x1C', '\x3', '\x2', '\x2', '\x2', '\n', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\f', ')', '\x3', '\x2', '\x2', '\x2', '\xE', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'G', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x14', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\t', '\x2', '\x2', '\x2', '\x17', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\a', '\x18', '\x2', '\x2', '\x19', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\t', '\x3', '\x2', '\x2', 
		'\x1B', '\a', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\t', '\x4', 
		'\x2', '\x2', '\x1D', '\t', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', '\v', '\x2', '\x2', '\x1F', '\v', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\b', '\a', '\x1', '\x2', '!', '*', '\x5', '\x14', '\v', '\x2', '\"', 
		'#', '\x5', '\x4', '\x3', '\x2', '#', '$', '\x5', '\f', '\a', '\x5', '$', 
		'*', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\x3', '\x2', '\x2', 
		'&', '\'', '\x5', '\f', '\a', '\x2', '\'', '(', '\a', '\x4', '\x2', '\x2', 
		'(', '*', '\x3', '\x2', '\x2', '\x2', ')', ' ', '\x3', '\x2', '\x2', '\x2', 
		')', '\"', '\x3', '\x2', '\x2', '\x2', ')', '%', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x31', '\x3', '\x2', '\x2', '\x2', '+', ',', '\f', '\x4', 
		'\x2', '\x2', ',', '-', '\x5', '\x2', '\x2', '\x2', '-', '.', '\x5', '\f', 
		'\a', '\x5', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\r', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\f', '\a', '\x2', '\x35', 
		'\x36', '\x5', '\x6', '\x4', '\x2', '\x36', '\x37', '\x5', '\f', '\a', 
		'\x2', '\x37', '=', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\x3', '\x2', '\x2', '\x39', ':', '\x5', '\xE', '\b', '\x2', ':', ';', 
		'\a', '\x4', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '=', '\xF', '\x3', '\x2', '\x2', '\x2', '>', '?', '\b', '\t', '\x1', 
		'\x2', '?', 'H', '\x5', '\xE', '\b', '\x2', '@', '\x41', '\x5', '\n', 
		'\x6', '\x2', '\x41', '\x42', '\x5', '\x10', '\t', '\x4', '\x42', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x3', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\x10', '\t', '\x2', '\x45', '\x46', '\a', '\x4', 
		'\x2', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', '>', '\x3', 
		'\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'O', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\f', '\x5', '\x2', '\x2', 'J', 'K', '\x5', '\b', '\x5', '\x2', 'K', 
		'L', '\x5', '\x10', '\t', '\x6', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 
		'M', 'I', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x11', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'U', '\a', ' ', '\x2', '\x2', 'S', 'U', '\a', '!', '\x2', 
		'\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'U', '\x13', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\b', '\v', 
		'\x1', '\x2', 'W', '\x61', '\a', '\x5', '\x2', '\x2', 'X', '\x61', '\x5', 
		'\x12', '\n', '\x2', 'Y', '\x61', '\a', '\x1E', '\x2', '\x2', 'Z', '\x61', 
		'\a', '\x1F', '\x2', '\x2', '[', '\x61', '\a', '\x1D', '\x2', '\x2', '\\', 
		']', '\a', '\x3', '\x2', '\x2', ']', '^', '\x5', '\x14', '\v', '\x2', 
		'^', '_', '\a', '\x4', '\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '`', 'V', '\x3', '\x2', '\x2', '\x2', '`', 'X', '\x3', '\x2', '\x2', 
		'\x2', '`', 'Y', '\x3', '\x2', '\x2', '\x2', '`', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '`', '[', '\x3', '\x2', '\x2', '\x2', '`', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x61', 'x', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\f', '\a', '\x2', '\x2', '\x63', '\x64', '\a', '\x6', '\x2', '\x2', '\x64', 
		'w', '\x5', '\x12', '\n', '\x2', '\x65', '\x66', '\f', '\x6', '\x2', '\x2', 
		'\x66', 'g', '\a', '\a', '\x2', '\x2', 'g', 'h', '\x5', '\f', '\a', '\x2', 
		'h', 'i', '\a', '\b', '\x2', '\x2', 'i', 'w', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\f', '\x5', '\x2', '\x2', 'k', 'l', '\a', '\a', '\x2', '\x2', 
		'l', 'm', '\x5', '\f', '\a', '\x2', 'm', 'n', '\a', '\t', '\x2', '\x2', 
		'n', 'o', '\x5', '\f', '\a', '\x2', 'o', 'p', '\a', '\b', '\x2', '\x2', 
		'p', 'w', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\f', '\x4', '\x2', '\x2', 
		'r', 's', '\a', '\a', '\x2', '\x2', 's', 't', '\x5', '\x10', '\t', '\x2', 
		't', 'u', '\a', '\b', '\x2', '\x2', 'u', 'w', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x62', '\x3', '\x2', '\x2', '\x2', 'v', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'j', '\x3', '\x2', '\x2', '\x2', 'v', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '\v', ')', '\x31', 
		'<', 'G', 'O', 'T', '`', 'v', 'x',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BuildXL.Execution.Analyzer.JPath
