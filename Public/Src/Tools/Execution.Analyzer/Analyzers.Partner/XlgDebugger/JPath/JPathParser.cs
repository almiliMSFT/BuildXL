//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JPath.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BuildXL.Execution.Analyzer.JPath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, NOT=11, AND=12, OR=13, XOR=14, IFF=15, GTE=16, LTE=17, GT=18, LT=19, 
		EQ=20, NEQ=21, MATCH=22, NMATCH=23, MINUS=24, PLUS=25, TIMES=26, DIV=27, 
		MOD=28, CONCAT=29, INTERSECT=30, IntLit=31, StrLit=32, RegExLit=33, VarID=34, 
		RootID=35, ESC_ID=36, IntBinaryOp=37, IntUnaryOp=38, BoolBinaryOp=39, 
		LogicBinaryOp=40, LogicUnaryOp=41, ArrayBinaryOp=42, AnyBinaryOp=43;
	public const int
		RULE_intExpr = 0, RULE_boolExpr = 1, RULE_logicExpr = 2, RULE_id = 3, 
		RULE_selector = 4, RULE_expr = 5;
	public static readonly string[] ruleNames = {
		"intExpr", "boolExpr", "logicExpr", "id", "selector", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'$'", "'.'", "'['", "']'", "'..'", "','", "'|'", 
		null, "'not'", "'and'", "'or'", "'xor'", "'iff'", "'>='", "'<='", "'>'", 
		"'<'", "'='", "'!='", "'~'", "'!~'", "'-'", "'+'", "'*'", "'/'", "'%'", 
		"'++'", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "NOT", 
		"AND", "OR", "XOR", "IFF", "GTE", "LTE", "GT", "LT", "EQ", "NEQ", "MATCH", 
		"NMATCH", "MINUS", "PLUS", "TIMES", "DIV", "MOD", "CONCAT", "INTERSECT", 
		"IntLit", "StrLit", "RegExLit", "VarID", "RootID", "ESC_ID", "IntBinaryOp", 
		"IntUnaryOp", "BoolBinaryOp", "LogicBinaryOp", "LogicUnaryOp", "ArrayBinaryOp", 
		"AnyBinaryOp"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IntExprContext : ParserRuleContext {
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
	 
		public IntExprContext() { }
		public virtual void CopyFrom(IntExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryIntExprContext : IntExprContext {
		public IntExprContext Lhs;
		public IToken Op;
		public IntExprContext Rhs;
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public ITerminalNode IntBinaryOp() { return GetToken(JPathParser.IntBinaryOp, 0); }
		public BinaryIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIntExprContext : IntExprContext {
		public ExprContext Expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterExprIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitExprIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryIntExprContext : IntExprContext {
		public IToken Op;
		public IntExprContext Sub;
		public ITerminalNode IntUnaryOp() { return GetToken(JPathParser.IntUnaryOp, 0); }
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public UnaryIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubIntExprContext : IntExprContext {
		public IntExprContext Sub;
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public SubIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		return intExpr(0);
	}

	private IntExprContext intExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IntExprContext _localctx = new IntExprContext(Context, _parentState);
		IntExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_intExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new ExprIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 13; ((ExprIntExprContext)_localctx).Expr = expr(0);
				}
				break;
			case 2:
				{
				_localctx = new UnaryIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 14; ((UnaryIntExprContext)_localctx).Op = Match(IntUnaryOp);
				State = 15; ((UnaryIntExprContext)_localctx).Sub = intExpr(3);
				}
				break;
			case 3:
				{
				_localctx = new SubIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16; Match(T__0);
				State = 17; ((SubIntExprContext)_localctx).Sub = intExpr(0);
				State = 18; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 27;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryIntExprContext(new IntExprContext(_parentctx, _parentState));
					((BinaryIntExprContext)_localctx).Lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_intExpr);
					State = 22;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 23; ((BinaryIntExprContext)_localctx).Op = Match(IntBinaryOp);
					State = 24; ((BinaryIntExprContext)_localctx).Rhs = intExpr(3);
					}
					} 
				}
				State = 29;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
	 
		public BoolExprContext() { }
		public virtual void CopyFrom(BoolExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryBoolExprContext : BoolExprContext {
		public IntExprContext Lhs;
		public IToken Op;
		public IntExprContext Rhs;
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public ITerminalNode BoolBinaryOp() { return GetToken(JPathParser.BoolBinaryOp, 0); }
		public BinaryBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubBoolExprContext : BoolExprContext {
		public BoolExprContext Sub;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public SubBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_boolExpr);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new BinaryBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; ((BinaryBoolExprContext)_localctx).Lhs = intExpr(0);
				State = 31; ((BinaryBoolExprContext)_localctx).Op = Match(BoolBinaryOp);
				State = 32; ((BinaryBoolExprContext)_localctx).Rhs = intExpr(0);
				}
				break;
			case 2:
				_localctx = new SubBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; Match(T__0);
				State = 35; ((SubBoolExprContext)_localctx).Sub = boolExpr();
				State = 36; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolLogicExprContext : LogicExprContext {
		public BoolExprContext Expr;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public BoolLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		public IToken Op;
		public LogicExprContext Sub;
		public ITerminalNode LogicUnaryOp() { return GetToken(JPathParser.LogicUnaryOp, 0); }
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubLogicExprContext : LogicExprContext {
		public LogicExprContext Sub;
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public SubLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		public LogicExprContext Lhs;
		public IToken Op;
		public LogicExprContext Rhs;
		public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		public ITerminalNode LogicBinaryOp() { return GetToken(JPathParser.LogicBinaryOp, 0); }
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new BoolLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 41; ((BoolLogicExprContext)_localctx).Expr = boolExpr();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42; ((UnaryLogicExprContext)_localctx).Op = Match(LogicUnaryOp);
				State = 43; ((UnaryLogicExprContext)_localctx).Sub = logicExpr(2);
				}
				break;
			case 3:
				{
				_localctx = new SubLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44; Match(T__0);
				State = 45; ((SubLogicExprContext)_localctx).Sub = logicExpr(0);
				State = 46; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 55;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
					((BinaryLogicExprContext)_localctx).Lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
					State = 50;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 51; ((BinaryLogicExprContext)_localctx).Op = Match(LogicBinaryOp);
					State = 52; ((BinaryLogicExprContext)_localctx).Rhs = logicExpr(4);
					}
					} 
				}
				State = 57;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	 
		public IdContext() { }
		public virtual void CopyFrom(IdContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EscIdSelectorContext : IdContext {
		public IToken PropertyName;
		public ITerminalNode ESC_ID() { return GetToken(JPathParser.ESC_ID, 0); }
		public EscIdSelectorContext(IdContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterEscIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitEscIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdSelectorContext : IdContext {
		public IToken PropertyName;
		public ITerminalNode VarID() { return GetToken(JPathParser.VarID, 0); }
		public IdSelectorContext(IdContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 6, RULE_id);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarID:
				_localctx = new IdSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; ((IdSelectorContext)_localctx).PropertyName = Match(VarID);
				}
				break;
			case ESC_ID:
				_localctx = new EscIdSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; ((EscIdSelectorContext)_localctx).PropertyName = Match(ESC_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RootIdSelectorContext : SelectorContext {
		public IToken RootPropertyName;
		public ITerminalNode RootID() { return GetToken(JPathParser.RootID, 0); }
		public RootIdSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameSelectorContext : SelectorContext {
		public IdContext Name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NameSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterNameSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitNameSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionSelectorContext : SelectorContext {
		public IdContext _id;
		public IList<IdContext> _Names = new List<IdContext>();
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(JPathParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(JPathParser.PLUS, i);
		}
		public UnionSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnionSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnionSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_selector);
		int _la;
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarID:
			case ESC_ID:
				_localctx = new NameSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; ((NameSelectorContext)_localctx).Name = id();
				}
				break;
			case RootID:
				_localctx = new RootIdSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; ((RootIdSelectorContext)_localctx).RootPropertyName = Match(RootID);
				}
				break;
			case T__0:
				_localctx = new UnionSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; Match(T__0);
				State = 65; ((UnionSelectorContext)_localctx)._id = id();
				((UnionSelectorContext)_localctx)._Names.Add(((UnionSelectorContext)_localctx)._id);
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 66; Match(PLUS);
					State = 67; ((UnionSelectorContext)_localctx)._id = id();
					((UnionSelectorContext)_localctx)._Names.Add(((UnionSelectorContext)_localctx)._id);
					}
					}
					State = 70;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PLUS );
				State = 72; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExprContext : ExprContext {
		public ExprContext Lhs;
		public SelectorContext Selector;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public MapExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterMapExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitMapExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncAppExprContext : ExprContext {
		public ExprContext Func;
		public ExprContext _expr;
		public IList<ExprContext> _Args = new List<ExprContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FuncAppExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFuncAppExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFuncAppExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAppExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinExprContext : ExprContext {
		public ExprContext Lhs;
		public IToken Op;
		public ExprContext Rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AnyBinaryOp() { return GetToken(JPathParser.AnyBinaryOp, 0); }
		public BinExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext Lhs;
		public IntExprContext Begin;
		public IntExprContext End;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ExprContext Lhs;
		public IntExprContext Index;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode RegExLit() { return GetToken(JPathParser.RegExLit, 0); }
		public RegExLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRegExLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRegExLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExprContext : ExprContext {
		public SelectorContext Sub;
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public SelectorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSelectorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSelectorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExprContext : ExprContext {
		public ExprContext Lhs;
		public LogicExprContext Filter;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public FilterExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RootExprContext : ExprContext {
		public RootExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode IntLit() { return GetToken(JPathParser.IntLit, 0); }
		public IntLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeExprContext : ExprContext {
		public ExprContext Input;
		public ExprContext Func;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PipeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterPipeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitPipeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrLitExprContext : ExprContext {
		public IToken Value;
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public StrLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterStrLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitStrLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new RootExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 77; Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new SelectorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; ((SelectorExprContext)_localctx).Sub = selector();
				}
				break;
			case 3:
				{
				_localctx = new StrLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; ((StrLitExprContext)_localctx).Value = Match(StrLit);
				}
				break;
			case 4:
				{
				_localctx = new RegExLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80; ((RegExLitExprContext)_localctx).Value = Match(RegExLit);
				}
				break;
			case 5:
				{
				_localctx = new IntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81; ((IntLitExprContext)_localctx).Value = Match(IntLit);
				}
				break;
			case 6:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82; Match(T__0);
				State = 83; ((SubExprContext)_localctx).Sub = expr(0);
				State = 84; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new BinExprContext(new ExprContext(_parentctx, _parentState));
						((BinExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 89; ((BinExprContext)_localctx).Op = Match(AnyBinaryOp);
						State = 90; ((BinExprContext)_localctx).Rhs = expr(9);
						}
						break;
					case 2:
						{
						_localctx = new PipeExprContext(new ExprContext(_parentctx, _parentState));
						((PipeExprContext)_localctx).Input = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 91;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 92; Match(T__8);
						State = 93; ((PipeExprContext)_localctx).Func = expr(3);
						}
						break;
					case 3:
						{
						_localctx = new MapExprContext(new ExprContext(_parentctx, _parentState));
						((MapExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 94;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 95; Match(T__3);
						State = 96; ((MapExprContext)_localctx).Selector = selector();
						}
						break;
					case 4:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						((IndexExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 97;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 98; Match(T__4);
						State = 99; ((IndexExprContext)_localctx).Index = intExpr(0);
						State = 100; Match(T__5);
						}
						break;
					case 5:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 103; Match(T__4);
						State = 104; ((RangeExprContext)_localctx).Begin = intExpr(0);
						State = 105; Match(T__6);
						State = 106; ((RangeExprContext)_localctx).End = intExpr(0);
						State = 107; Match(T__5);
						}
						break;
					case 6:
						{
						_localctx = new FilterExprContext(new ExprContext(_parentctx, _parentState));
						((FilterExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 110; Match(T__4);
						State = 111; ((FilterExprContext)_localctx).Filter = logicExpr(0);
						State = 112; Match(T__5);
						}
						break;
					case 7:
						{
						_localctx = new FuncAppExprContext(new ExprContext(_parentctx, _parentState));
						((FuncAppExprContext)_localctx).Func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 114;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 115; Match(T__0);
						State = 116; ((FuncAppExprContext)_localctx)._expr = expr(0);
						((FuncAppExprContext)_localctx)._Args.Add(((FuncAppExprContext)_localctx)._expr);
						State = 121;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__7) {
							{
							{
							State = 117; Match(T__7);
							State = 118; ((FuncAppExprContext)_localctx)._expr = expr(0);
							((FuncAppExprContext)_localctx)._Args.Add(((FuncAppExprContext)_localctx)._expr);
							}
							}
							State = 123;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 124; Match(T__1);
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return intExpr_sempred((IntExprContext)_localctx, predIndex);
		case 2: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool intExpr_sempred(IntExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x86', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x17', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x1C', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x1F', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', ')', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x33', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '\x38', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ';', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '?', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x6', '\x6', 'G', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'H', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'M', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Y', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'z', '\n', '\a', '\f', '\a', '\xE', '\a', '}', '\v', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x81', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x84', '\v', '\a', '\x3', '\a', '\x2', '\x5', '\x2', '\x6', '\f', '\b', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', '\x97', '\x2', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x32', '\x3', '\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'L', '\x3', '\x2', '\x2', '\x2', '\f', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xF', '\b', '\x2', '\x1', '\x2', '\xF', '\x17', 
		'\x5', '\f', '\a', '\x2', '\x10', '\x11', '\a', '(', '\x2', '\x2', '\x11', 
		'\x17', '\x5', '\x2', '\x2', '\x5', '\x12', '\x13', '\a', '\x3', '\x2', 
		'\x2', '\x13', '\x14', '\x5', '\x2', '\x2', '\x2', '\x14', '\x15', '\a', 
		'\x4', '\x2', '\x2', '\x15', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x16', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x12', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x19', '\f', '\x4', '\x2', '\x2', '\x19', 
		'\x1A', '\a', '\'', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\x2', '\x2', 
		'\x5', '\x1B', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', '\x2', 
		'\x2', '\x2', '!', '\"', '\a', ')', '\x2', '\x2', '\"', '#', '\x5', '\x2', 
		'\x2', '\x2', '#', ')', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x3', 
		'\x2', '\x2', '%', '&', '\x5', '\x4', '\x3', '\x2', '&', '\'', '\a', '\x4', 
		'\x2', '\x2', '\'', ')', '\x3', '\x2', '\x2', '\x2', '(', ' ', '\x3', 
		'\x2', '\x2', '\x2', '(', '$', '\x3', '\x2', '\x2', '\x2', ')', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\b', '\x4', '\x1', '\x2', '+', 
		'\x33', '\x5', '\x4', '\x3', '\x2', ',', '-', '\a', '+', '\x2', '\x2', 
		'-', '\x33', '\x5', '\x6', '\x4', '\x4', '.', '/', '\a', '\x3', '\x2', 
		'\x2', '/', '\x30', '\x5', '\x6', '\x4', '\x2', '\x30', '\x31', '\a', 
		'\x4', '\x2', '\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x32', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '.', '\x3', '\x2', '\x2', '\x2', '\x33', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\f', '\x5', '\x2', '\x2', '\x35', '\x36', 
		'\a', '*', '\x2', '\x2', '\x36', '\x38', '\x5', '\x6', '\x4', '\x6', '\x37', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', '\a', '\x3', '\x2', '\x2', '\x2', ';', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '<', '?', '\a', '$', '\x2', '\x2', '=', '?', 
		'\a', '&', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '=', 
		'\x3', '\x2', '\x2', '\x2', '?', '\t', '\x3', '\x2', '\x2', '\x2', '@', 
		'M', '\x5', '\b', '\x5', '\x2', '\x41', 'M', '\a', '%', '\x2', '\x2', 
		'\x42', '\x43', '\a', '\x3', '\x2', '\x2', '\x43', '\x46', '\x5', '\b', 
		'\x5', '\x2', '\x44', '\x45', '\a', '\x1B', '\x2', '\x2', '\x45', 'G', 
		'\x5', '\b', '\x5', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\a', '\x4', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'L', '@', '\x3', '\x2', '\x2', '\x2', 'L', '\x41', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x42', '\x3', '\x2', '\x2', '\x2', 'M', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\b', '\a', '\x1', '\x2', 'O', 'Y', '\a', 
		'\x5', '\x2', '\x2', 'P', 'Y', '\x5', '\n', '\x6', '\x2', 'Q', 'Y', '\a', 
		'\"', '\x2', '\x2', 'R', 'Y', '\a', '#', '\x2', '\x2', 'S', 'Y', '\a', 
		'!', '\x2', '\x2', 'T', 'U', '\a', '\x3', '\x2', '\x2', 'U', 'V', '\x5', 
		'\f', '\a', '\x2', 'V', 'W', '\a', '\x4', '\x2', '\x2', 'W', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'N', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Q', '\x3', '\x2', '\x2', '\x2', 'X', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'S', '\x3', '\x2', '\x2', '\x2', 'X', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\x82', '\x3', '\x2', '\x2', '\x2', 'Z', '[', 
		'\f', '\n', '\x2', '\x2', '[', '\\', '\a', '-', '\x2', '\x2', '\\', '\x81', 
		'\x5', '\f', '\a', '\v', ']', '^', '\f', '\x4', '\x2', '\x2', '^', '_', 
		'\a', '\v', '\x2', '\x2', '_', '\x81', '\x5', '\f', '\a', '\x5', '`', 
		'\x61', '\f', '\t', '\x2', '\x2', '\x61', '\x62', '\a', '\x6', '\x2', 
		'\x2', '\x62', '\x81', '\x5', '\n', '\x6', '\x2', '\x63', '\x64', '\f', 
		'\b', '\x2', '\x2', '\x64', '\x65', '\a', '\a', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\b', '\x2', '\x2', 
		'g', '\x81', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\f', '\a', '\x2', 
		'\x2', 'i', 'j', '\a', '\a', '\x2', '\x2', 'j', 'k', '\x5', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '\t', '\x2', '\x2', 'l', 'm', '\x5', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\b', '\x2', '\x2', 'n', '\x81', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\f', '\x6', '\x2', '\x2', 'p', 'q', '\a', '\a', 
		'\x2', '\x2', 'q', 'r', '\x5', '\x6', '\x4', '\x2', 'r', 's', '\a', '\b', 
		'\x2', '\x2', 's', '\x81', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\f', 
		'\x5', '\x2', '\x2', 'u', 'v', '\a', '\x3', '\x2', '\x2', 'v', '{', '\x5', 
		'\f', '\a', '\x2', 'w', 'x', '\a', '\n', '\x2', '\x2', 'x', 'z', '\x5', 
		'\f', '\a', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', 
		'\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', 
		'\x2', '\x2', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\a', '\x4', '\x2', '\x2', '\x7F', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x80', 'Z', '\x3', '\x2', '\x2', '\x2', '\x80', 
		']', '\x3', '\x2', '\x2', '\x2', '\x80', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x63', '\x3', '\x2', '\x2', '\x2', '\x80', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x80', 'o', '\x3', '\x2', '\x2', '\x2', '\x80', 't', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\r', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x16', '\x1D', '(', '\x32', '\x39', '>', 
		'H', 'L', 'X', '{', '\x80', '\x82',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BuildXL.Execution.Analyzer.JPath
